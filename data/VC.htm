
<!DOCTYPE html>   
<!-- 
  s60sc 2022 
--> 
<html>
  <head>
    <meta charset="UTF-8">  
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <title>Voice Changer</title>
    <link rel="icon" href='data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><text y="80" font-size="80">ðŸŽ¤</text></svg>'>
    
    <style>
      :root {
        /* colors used on web pages - see https://www.w3schools.com/colors/colors_names.asp */
        --buttonReady: crimson;
        --buttonActive: ForestGreen;
        --buttonHover: green;
        --buttonText: white;
        --buttonLabel: black;
        --itemInactive: gray;
        --menuBackground: #404040; /* dark gray */
        --inputText: navy;
        --pageText: WhiteSmoke; 
        --inputBackground: WhiteSmoke; 
        --alertMsg: orange;             
        --itemBorder: silver; 
        --pageBackground:#181818; /* nearly black */

        /* logcolors */
        --warnColor: orange;
        --errColor: red;
        --chkColor: green;
        --dbgColor: blue;
        
        /* element sizes */
        --bodySize:1rem; /* used as basis for element, padding, and font sizes */
        --buttonSize: var(--bodySize);
        --buttonHalf: calc(var(--buttonSize) / 2);
        --buttonQuart: calc(var(--buttonSize) / 4);
        --buttonDbl: calc(var(--buttonSize) * 2);
        --inputSize: calc(var(--bodySize) * 0.9);
        --headingSize: calc(var(--bodySize) * 1.25);
        --subheadingSize: var(--bodySize);
        --footerSize: calc(var(--bodySize) * 0.7);
      }
      
      body {
        font-family: Helvetica  !important;
        background: var(--pageBackground);
        color: var(--pageText);
        font-size: var(--bodySize);  
      }
      
      .hidden {
        display: none
      }
      
      progress {
        accent-color: var(--buttonActive); 
        width: calc(var(--buttonSize) * 15);
      }
      
      .fixed {
        position: fixed;
        top: 0;
      }

      .alertMsg {
        left:10%;
        bottom: var(--buttonDbl);
        position:absolute;
        display:block;
        color:var(--alertMsg);
        z-index:20;
        height: var(--buttonDbl);
      }

      .header {
        font-size: var(--headingSize);
        padding-left: var(--buttonHalf);
        font-weight:bold;     
      }
      
      .subheader {
        font-style: italic;
        font-size: var(--subheadingSize);
        padding-left: var(--buttonQuart);
      }
      
      .tab {
        display: flex;
        overflow: hidden;
        background: var(--menuBackground);
      }

      .tab button {
        background: var(--buttonReady);
        float: left;
        border: none;
        outline: none;
        cursor: pointer;
        padding: var(--buttonHalf);
        transition: 0.3s;
        font-size: calc(var(--buttonSize) * 1.1);
      }
      
      .tab button.active {
        box-shadow: 0 0 0 var(--buttonQuart) var(--buttonActive);
        background: var(--buttonActive);
      }

      .tab button.hover {
        background: var(--buttonHover);
      }
      
      .tab button.disabled {
        cursor: default;
        background: var(--itemInactive)
      }
      
      .tabcontent {
        display: none;
      }

     .grid-cols3 {
        grid-template-columns: calc(var(--buttonSize) * 14) calc(var(--buttonSize) * 12) calc(var(--buttonSize) * 12);
        display: grid;
        background: none;
        text-align: center;
        font-size: var(--inputSize);
        fill: var(--buttonLabel);
        border: 0px solid var(--itemBorder);
        dominant-baseline: middle;
        text-anchor: middle;
      }
      
      .cfgTitle {
        grid-column: 1/5;
        text-align: left;
      }
      
      svg {
        width: calc(var(--buttonSize) * 8);
        height: var(--buttonDbl);
      }
      
      rect {
        fill: var(--buttonReady);
        width: 100%;
        height: 100%; 
        x: 0;
        y: 0;
        ry: 15%;
      }
      
      rect:active {
        fill: var(--buttonActive);
      }
      
      rect:hover {
        fill: var(--buttonHover);
      }
    
      text {
        font-size: var(--buttonSize); 
        fill: var(--buttonText);
        transform: translate(50%,50%); 
        pointer-events: none; 
      }
      
      .panel {
        padding: 0 var(--buttonSize);
        display: none;
        background-color: var(--pageBackground);
        overflow: hidden;
      }
      
      button {
        display: block;
        margin: var(--buttonQuart);
        padding: var(--buttonQuart);
        border: 0;
        line-height: var(--headingSize);
        cursor: pointer;
        color: var(--buttonText);
        background: var(--buttonReady);
        border-radius: var(--buttonQuart);
        font-size: var(--buttonSize);
        outline: 0
      }

      button:active{
       box-shadow: 0 0 0 var(--buttonQuart) var(--buttonActive);
        background: var(--buttonActive);
      }
      
      button:hover {
        background: var(--buttonHover);
      }

      button:disabled {
        cursor: default;
        background: var(--itemInactive)
      }

      .input-group {
        position: relative;
        display: flex;
        flex-wrap: nowrap;
        line-height: var(--buttonDbl);
        margin-top: var(--buttonHalf);
      }
      
      .input-group>label {
        display: inline-block;
        padding-right: var(--buttonHalf);
        min-width: calc(var(--buttonSize)*7);
      }
      
      .input-group>input {
          width: 100%;
      }

      .input-group input,.input-group select {
        flex-grow: 1
      }

      input, #applog, #ramlog {
        font: var(--inputSize) 'Courier New';
        font-weight:bold;
        color: var(--inputText);
        background: var(--inputBackground);
        min-width: calc(var(--buttonSize) * 10);
      }
      
      input[type="radio"], input[type="checkbox"], progress {
        accent-color: var(--buttonActive);
      }
      
      input[type="text"] {
        font-size: var(--inputSize); 
        width: calc(var(--buttonSize) * 6);  
      }
      
      input[type="checkbox"] {
        width : calc(var(--inputSize) * 1.5);
        height : calc(var(--inputSize) * 1.5);
        margin-top: calc(var(--buttonQuart) * -1);
      }
      
      input[type="radio"] {
        width: var(--inputSize);
        height: var(--inputSize);
        min-width: var(--buttonSize);
      }
      
      input[type="number"]:not(.configItem), input[type="time"] {
        font-size: var(--buttonDbl);
        border: 1px solid var(--itemBorder);
        margin-bottom: var(--buttonQuart);
        min-width: calc(var(--buttonSize) * 7);
        text-align: center;
      } 
      
      input[type=number]::-webkit-inner-spin-button {
        opacity: 1
      }
      

      /* checkbox toggle switch slider */
            
      .switch {
        position: relative;
        display: inline-block;
        width: calc(var(--buttonSize) * 2);
        height: var(--buttonSize);
        top: var(--buttonHalf);
      }

      .switch input {
        opacity: 0;
        width: 0;
        height: 0;
      }

      .slider {
        position: absolute;
        border-radius: var(--buttonSize);
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: var(--itemInactive);
        width: calc(var(--buttonSize) * 3);
        transition: .4s;
      }

      .slider:before {
        position: absolute;
        border-radius: 50%;
        content: "";
        height: var(--buttonSize);
        width: var(--buttonSize);
        left: var(--buttonQuart);
        background: var(--inputBackground);
        transition: .4s;
      }

      input:checked + .slider {
        background-color: var(--buttonActive);
      }

      input:checked + .slider:before {
        transform: translateX(calc(var(--buttonSize)*1.5));
      }
      
      #applog, #ramlog {
        height:50vh;
        width:90%;
        border:2px solid var(--itemBorder);
        overflow:auto;
        background: var(--inputBackground);
      }
    
      select {
        border: 1px solid var(--menuBackground);
        font-size: var(--inputSize);
        outline: 0;
        border-radius: var(--buttonQuart);
        margin-top: 2px;
      }
      
      .selectField {
        height: calc(var(--inputSize) * 1.5);
      }  
      
      table {
        border-collapse:collapse; 
        table-layout:fixed;
        background: var(--menuBackground);
        text-align: left;
      }
      
      th, td {
        font-weight:bold; 
      }
      
      .config-group th, .config-group td {
        border: 0;
        padding: var(--buttonHalf) var(--buttonHalf) 0 var(--buttonHalf); 
        padding-left: var(--buttonSize);
        line-height: var(--buttonDbl);
        font-size: var(--buttonSize);
      }
      
      .configGroup td input[type="number"] {
        font-size: var(--buttonSize);
      }
      
      input.configItem[type="radio"] {
        min-width: var(--buttonSize); 
      }
      
      input.configItem[type="number"] {
        min-width: calc(var(--buttonSize) * 3); 
        width: calc(var(--buttonSize) * 3); 
      }

      .svgCols {
        width: calc(var(--buttonSize) * 9);  
        height: calc(var(--buttonSize) * 2.5);  
        fill: var(--buttonLabel);
        font-size: calc(var(--buttonSize) * 1.5);
      }   
      
      .upperText {
        transform: translate(50%,30%);  
      }
      
      .lowerText {
        transform: translate(50%,70%);  
      }
      
      .midText {
        transform: translate(50%,50%); 
      }
      
      
      /*** range slider ***/

      .input-group>input[type=range]  {
        min-width: calc(var(--buttonSize) * 7);  
      }

      input[type=range] {
        -webkit-appearance: none;
        font-size: var(--buttonSize);
        width: 100%;
        height: var(--buttonHalf);
        background: var(--menuBackground);
        cursor: pointer;
        margin-top: calc(var(--buttonSize) * 3/4);
      }

      input[type=range]:focus {
        outline: 0
      }

      input[type=range]::-webkit-slider-runnable-track {
        width: 100%;
        height: 2px;
        cursor: pointer;
        background: var(--inputBackground);
        border-radius: var(--buttonHalf);
      }

      input[type=range]::-webkit-slider-thumb {
        height: var(--buttonSize);
        width: var(--buttonSize);
        border-radius: 50%;
        background: var(--buttonReady); 
        cursor: pointer;
        -webkit-appearance: none;
        margin-top: calc(-1 * var(--buttonHalf));
      }
      input[type=range]:focus::-webkit-slider-runnable-track {
        background: var(--inputBackground);
      }
  
      div[name="rangeVal"] {
        width: var(--buttonDbl);
        height: var(--buttonSize);
        line-height: 150%;
        text-align: center;
        background: var(--buttonReady); 
        color: var(--buttonText); 
        font-size: var(--footerSize);
        display: block;
        position: absolute;
        left: 50%;
        transform: translate(-50%, 0);
        border-radius: 25%;
        top: -25%; 
      }

       div[name="rangeMin"], div[name="rangeMax"] {
        display: inline-block;
        padding: 0 var(--buttonQuart);
      }
      
      
      .navtop{
        list-style: none;
        border: 1px solid var(--itemBorder);
        border-radius: var(--buttonQuart);
        padding: var(--buttonQuart);
        margin-top: var(--buttonHalf);  
      }
      
      .table-group table {
        width: 100%;
      }
        
      .table-group th, .table-group td {
        border: 1px solid var(--itemBorder);
        padding: var(--buttonHalf) var(--buttonHalf) 0 var(--buttonHalf); 
      }

      .innertable td {
        border:0;
      }
      
      .innertable select {
        font-size: var(--inputSize);
        color: var(--inputText);
      }
      
      fieldset {
        margin-bottom: var(--inputSize);
      }

    </style>
  </head>
  
  <body>
    <div class="tab">
      <ul class="navtop">
        <button class="tablinks active" name="VoiceChanger" id="mainTab">VoiceChanger</button>
        <button class="tablinks" name="ShowLog">Show Log</button>
        <button class="tablinks" name="EditConfig">Edit Config</button>
        <button class="tablinks" name="OTAUpload">OTA Upload</button>
      </ul>
    </div>
    <div id="VoiceChanger" class="tabcontent" style="display:block">
      <div class="table-group">
       <table id="button-group">
        <tr>
          <td>
           <button id="save" class="control-action" value="1">Save</button>
         </td><td>
           <button id="record" class="control-action" value="2">Record</button>
         </td><td>
           <button id="play" class="control-action" value="3">Play</button>
         </td><td>
           <button id="stop" class="control-action" value="6">Stop</button>
         </td><td>
           <button id="output" class="download-action" value="5">Download</button>
         </td><td>
           <button id="passthru" class="control-action" value="4">PassThru</button>
         </td>
        </tr>
      </table>
      <table>
        <td>
          <table class="innertable"><td>
            <div class="input-group">
              <label for="BP">Band Pass:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="BP">
                <label title="" class="slider" for="BP"></label>
              </div>
            </div>
            </td><td>
              <label for="BPcas">Cascade:</label>
              <select id="BPcas">
                <option name="BPcas" value="1" selected>1</option> 
                <option name="BPcas" value="2">2</option> 
                <option name="BPcas" value="3">3</option>
                <option name="BPcas" value="4">4</option> 
              </select>
          </td></table>
        </td><td>
          <div class="input-group">
            <label for="BPfreq">Frequency:</label>
            <input class="freq" title="Set filter band pass central frequency" type="range" id="BPfreq" min="0" max="8000" value="4000" step="10">
          </div>
        </td><td>
          <div class="input-group">
            <label for="BPqval">Q factor: </label>
            <input class="logslider" title="Set Q resonance factor" type="range" id="BPqval" min="0.1" max="10" step="0.1" value="0.7">
          </div>
        </td></tr>
        <tr><td>      
          <table class="innertable"><td>
            <div class="input-group">
              <label for="HP">Low Cut:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="HP">
                <label title="" class="slider" for="HP"></label>
              </div>
            </div>
            </td><td>
              <label for="HPcas">Cascade:</label>
              <select id="HPcas">
                <option name="HPcas" value="1" selected>1</option> 
                <option name="HPcas" value="2">2</option> 
                <option name="HPcas" value="3">3</option>
                <option name="HPcas" value="4">4</option> 
              </select>
          </td></table>
        </td><td>
          <div class="input-group">
            <label for="HPfreq">Frequency:</label>
            <input class="freq" title="Set filter high pass frequency" type="range" id="HPfreq" min="0" max="8000" value="4000" step="10">
          </div>
        </td><td>
          <div class="input-group">
            <label for="HPqval">Q factor: </label>
            <input class="logslider" title="Set Q resonance factor" type="range" id="HPqval" min="0.1" max="10" step="0.1" value="0.7">
          </div>
        </td></tr>
        <tr><td>   
          <table class="innertable"><td>
             <div class="input-group">
              <label for="LP">High Cut:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="LP">
                <label title="" class="slider" for="LP"></label>
              </div>
            </div>
            </td><td>
              <label for="LPcas">Cascade:</label>
              <select id="LPcas">
                <option name="LPcas" value="1" selected>1</option> 
                <option name="LPcas" value="2">2</option> 
                <option name="LPcas" value="3">3</option>
                <option name="LPcas" value="4">4</option> 
              </select>
          </td></table>
        </td><td>    
          <div class="input-group">
            <label for="LPfreq">Frequency:</label>
            <input class="freq" title="Set filter low pass frequency" type="range" id="LPfreq" min="0" max="8000" value="4000" step="10">
          </div>
        </td><td>  
           <div class="input-group">
            <label for="LPqval">Q factor: </label>
            <input class="logslider" title="Set Q resonance factor" type="range" id="LPqval" min="0.1" max="10" step="0.1" value="0.7">
          </div>
        </td></tr>
        <tr><td>    
           <table class="innertable"><td>
             <div class="input-group">
              <label for="HS">High Shelf:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="HS">
                <label title="" class="slider" for="HS"></label>
              </div>
            </div>
           </td><td></td></table> 
        </td><td> 
          <div class="input-group">
            <label for="HSfreq">Frequency:</label>
            <input class="freq" title="Set filter high shelf frequency" type="range" id="HSfreq" min="0" max="8000" value="4000" step="10">
          </div>
        </td><td>  
           <div class="input-group">
            <label for="HSgain">Gain dB:</label>
            <input title="Set filter gain" type="range" id="HSgain" min="0" max="20" value="0" step="any">
          </div>
        </td></tr>
        <tr><td>    
           <table class="innertable"><td>
             <div class="input-group">
              <label for="LS">Low Shelf:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="LS">
                <label title="" class="slider" for="LS"></label>
              </div>
            </div>
           </td><td></td></table> 
        </td><td>   
          <div class="input-group">
            <label for="LSfreq">Frequency:</label>
            <input class="freq" title="Set filter low shelf frequency" type="range" id="LSfreq" min="0" max="8000" value="4000" step="10">
          </div>
        </td><td>  
          <div class="input-group">
            <label for="LSgain">Gain dB:</label>
            <input title="Set filter gain" type="range" id="LSgain" min="0" max="20" value="0" step='any'>
          </div>
        </td></tr>
        <tr><td>       
          <table class="innertable"><td>
            <div class="input-group">
              <label for="PK">Peak:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="PK">
                <label title="" class="slider" for="PK"></label>
              </div>
            </div>
           </td><td></td></table> 
        </td><td>   
          <div class="input-group">
            <label for="PKfreq">Frequency:</label>
            <input class="freq" title="Set filter peak frequency" type="range" id="PKfreq" min="0" max="8000" value="4000" step="10"> 
          </div>
        </td><td rowspan=2>     
          <div class="input-group">
            <label for="PKgain">Gain dB:</label>
            <input title="Set filter gain" type="range" id="PKgain" min="0" max="20" value="0"  step='any'>
          </div><br>
          <div class="input-group">
            <label for="PKqval">Q factor: </label>
            <input class="logslider" title="Set Q resonance factor" type="range" id="PKqval" min="0.1" max="10" step="0.1" value="0.7">
          </div>
        </td></tr>
         <tr><td>       
          <table class="innertable"><td>
            <div class="input-group">
              <label for="CP">Clipping:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="CP">
                <label title="" class="slider" for="CP"></label>
              </div>
            </div>
          </td><td></td></table>
        </td><td>       
         <div class="input-group"> 
            <label for="ClipFac">Hardness:</label>
            <input title="Set clipping factor, higher is harder" type="range" id="ClipFac" min="1" max="10" value="1">
          </div> 
         </td></tr>
         <tr><td>       
          <table class="innertable"><td>
            <div class="input-group">
              <label for="RM">Ring Mod:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="RM">
                <label title="" class="slider" for="RM"></label>
              </div>
            </div>
          </td><td></td></table>
         </td><td>       
          <div class="input-group">
            <label for="SineFreq">Frequency:</label> 
            <input title="Set sine wave frequency" type="range" id="SineFreq" min="0" max="400" value="80" step="10">
          </div>
         </td><td>
          <div class="input-group">
            <label for="SineAmp">Amplitude:</label> 
            <input title="Set sine wave amplitude" type="range" id="SineAmp" min="1" max="7" value="3">
          </div>
         </td></tr>
         <tr><td>       
          <table class="innertable"><td>
             <div class="input-group">
              <label for="RV">Reverb:</label>
              <div class="switch">
                <input type="checkbox" name="filter" id="RV">
                <label title="" class="slider" for="RV"></label>
              </div>
            </div>
          </td><td></td></table>
         </td><td>       
          <div class="input-group"> 
            <label for="DecayFac">Decay Factor:</label>
            <input title="Reverb decay factor, higher is faster" type="range" id="DecayFac" min="1" max="10" value="1">
          </div>
         </td><td rowspan=2 style="vertical-align:center">
          <div class="input-group">
            <label for="Pitch">Pitch Shift: </label>
            <input title="Set Pitch Shift factor" type="range" id="Pitch" min="0.5" max="2" step="0.1" value="1">
          </div>
          <div class="input-group">
            <label for="PreAmp">Preamp Gain:</label>
            <input title="Set microphone preamp gain level" type="range" id="PreAmp" min="0" max="7" value="4">
          </div>
          <div class="input-group">
            <label for="AmpVol">Volume:</label>
            <input title="Set ampifier volume level" type="range" id="AmpVol" min="0" max="7" value="4">
          </div>
          <div class="input-group">
            <label for="Bright">Brightness:</label>
            <input title="Set audio led brightness level" type="range" id="Bright" min="0" max="7" value="4">
          </div>
         </td></tr>
         <tr><td>  
          <fieldset>      
          <legend>I2S Peripheral Channel</legend> 
          <!-- if MicChan:"1" then mic is I2S_NUM_1, else mic is I2S_NUM_0 (opposite for amp) -->
          <div class="input-group">
            <label for="micI2S">Microphone:</label>0&nbsp;
            <div class="switch">
              <input id="micI2S" type="checkbox" name="MicChan" value="1" Checked>
              <label title="Select which channel to use" class="slider" for="micI2S"></label>
             </div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
           </div>
           <div class="input-group">
            <label for="ampI2S">Amplifier:</label>0&nbsp;
            <div class="switch">
              <input id="ampI2S" type="checkbox" name="MicChan" value="0">
              <label title="Select which channel to use" class="slider" for="ampI2S"></label>
            </div>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1
           </div>
          </fieldset>
         </td><td>       
          <fieldset>      
           <legend>Device Type</legend> 
             <div>
              <span style="display: inline-block; width: calc(var(--buttonSize) * 7); margin-top:var(--buttonSize)">Microphone</span>
              <input type="radio" name="mType" value="0" checked>I2S 
              <input type="radio" name="mType" value="1">PDM
              <input type="radio" name="mType" value="2">ADC
            </div>
            <br>
            <div>
              <span style="display: inline-block; width: calc(var(--buttonSize) * 7)">Amplifier:</span>
              <input type="radio" name="aType" value="0" checked>I2S 
              <input type="radio" name="aType" value="1">PDM
              <input type="radio" name="aType" value="2">DAC
             </div>
           </fieldset>
         </td></tr>
         <tr><td>
           <table class="innertable"><td>
              <div class="input-group">
                <label for="Disable">Disable: </label>
                <div class="switch">
                  <input id="Disable" type="checkbox">
                  <label title="Disable current filter selection" class="slider" for="Disable"></label>
                </div>
              </div>
             </td><td>
            <div class="input-group">
              <label for="VolPot">Analog Control: </label>
              <div class="switch">
                <input id="VolPot" type="checkbox">
                <label title="Whether an external potentiometer used for volume / brightness" class="slider" for="VolPot"></label>
              </div>
            </div> 
           </td></table>
         </td><td colspan="2">
          <fieldset>           
          <legend>Sample Rate</legend>   
            <input type="radio" name="Srate" value="8000">8000    
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="radio" name="Srate" value="11025">11025    
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;          
            <input type="radio" name="Srate" value="16000" Checked>16000
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="radio" name="Srate" value="22050">22050
            &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <input type="radio" name="Srate" value="44100">44100
          </fieldset>
         </td>
        </tr>
      </table>
      </div>
     </div>
     
     <div id="ShowLog" class="tabcontent">
      <br>
      <div class="grid-cols3">
        <div class="input-group">
          <label for="wsMode" class="header" title="Enable logging to websocket">Logging:</label>
          <div class="switch">
            <input class="local" id="wsMode" type="checkbox">
            <label title="Output log to WS" class="slider" for="wsMode"></label>
          </div>   
        </div>
        <div>
          <svg>
            <rect/>
            <text id="clearWSlog" class="midText">Clear Log</text>
          </svg>
        </div>
        <div class="input-group" id="dbg-group" style="text-align: left">
          <label for="dbgVerbose" class="header" title="Set verbose logging">Verbose:</label>
          <div class="switch">
            <input id="dbgVerbose" type="checkbox">
            <label title="Outputs additional information to log" class="slider" for="dbgVerbose"></label>
          </div>
        </div>
      </div>
      <br>
      <div id="applog"></div>
      <br><br>
      <div class="grid-cols3">
        <div>
          <svg>
            <rect/>
            <text class="midText" id="refreshRAMlog">Display RAM Log</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text class="midText" id="clearRAMlog">Clear RAM Log</text>
          </svg>
        </div>
      </div>
      <br>
      <div id="ramlog"></div>
    </div>
    <br>
    
    <div id="EditConfig" class="tabcontent">
      <br>
      <div class="header">Control</div>
      <br>
      <div class="grid-cols3">
        <div>
          <svg>
            <rect/>
            <text id="reset" class="midText">Save & Reboot</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="deldata" class="midText">Reload /data</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="clear" class="midText">Clear NVS</text>
          </svg>
        </div>
        <div class="cfgTitle">
          <br>
          <div class="header">Settings</div>
          <div class="subheader">Press a button to view or modify settings (changed values are not validated)</div>
          <div class="subheader">Press Save & Reboot button to apply changes</div>
          <br>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="wifi" class="midText">Wifi</text>
          </svg>
        </div>
        <div>
          <svg>
            <rect/>
            <text id="pinout" class="midText">Pins</text>
          </svg>
        </div>
      </div>
      <div>
        <p class='config-group' id='Cfg'></p>
      </div>
    </div>
           
    <div id="OTAUpload" class="tabcontent">
      <br><br>
      <form id="upload_form" enctype="multipart/form-data" method="post">
        <input class="local" type="file" name="otafile" id="otafile">
        <br><br>
        <progress id="progressOta" value="0" max="100" ></progress>%
        <div class="subheader" id="status"></div>
        <p id="loaded_n_total"></p>
      </form>
    </div>
    
    <div class="alertMsg">
      <span id="alertText"></span>
    </div>
    
    <script>
      'use strict'
      
      // web server ports, automatically derive from entered port number
      const webPort = !window.location.port ? "80" : window.location.port;
      const otaPort = String(+webPort + 1);
      
      let refreshInterval = 30000; 

      function processStatus(dest, key, value, fromUser = true) {
        // process change to status value
        if (dest == ID) {
          // operation based on ID
          if (key == "wifi") getConfig("0");
          else if (key == "hostName") {
            document.title = value;
            if (fromUser) sendControl(key, value);
          }
          else if (key == "otafile") otaUploadFile();
          else if (key == "alertMsg") showAlert(value);
          else if (key == "clearWSlog") $('#applog').innerHTML = "";
          else if (key == "clearRAMlog") clearRAMlog();
          else if (key == "refreshRAMlog") getRAMlog();
          else if (key == "reset") saveChanges();
          else if (key == "wsMode") value == 1 ? initWebSocket() : closeWS();
          else if (key == "refreshVal") refreshInterval = value * 1000; 
          else if (key == "clockUTC") checkTime(value);
          else if (key == "pinout") getConfig("01");
          else if (key == "Srate") setMaxFreq(fromUser); 
          else if (isDefined($('#'+key)) && $('#'+key).classList.contains("control-action")) sendControl('action', value);
          else if (isDefined($('#'+key)) && $('#'+key).classList.contains("download-action")) window.location.href='/control?action=5'
          else if (isDefined($('#'+key)) && $('#'+key).name == 'MicChan') changeI2Schan(key, value);
          else if (key == "MicChan") setI2Schan(value);
          // remaining changes are passed thru to app
          else if (fromUser) sendControl(key, value); 
        }
        else if (dest == CLASS) {}
      }
      
      function changeI2Schan(key, value) {
        // toggle mic / amp I2S channel used
        sendControl('MicChan', key == 'micI2S' ? value : +!value);
        if (key == 'micI2S') $('#ampI2S').checked = +!value;
        else $('#micI2S').checked = +!value;
      }
      
      function setI2Schan(value) {
        // iniialise mic / amp I2S channel used
        $('#ampI2S').checked = false;
        $('#micI2S').checked = false;
        value == 1 ? $('#micI2S').checked = true : $('#ampI2S').checked = true;
      }
      
      function setMaxFreq(fromUser = false) {
        // change frequency max limits and initial values 
        const srate = $('input[name="Srate"]:checked').value;
        $$('input[type="range"].freq').forEach(el => { 
          el.max = srate / 2;
          el.parentElement.children.rangeMax.innerHTML = srate / 2;
          if (fromUser) rangeSlider(el);
          else el.value = srate / 4;
        });
        if (fromUser) sendControl("Srate", srate); 
      }
      
      function customInit() {
        setMaxFreq();
      }
      
      function configStatus(refresh) {
        if (!refresh) loadStatus("");
      }
      
      /****************************************************/
      
      // common script config
      const doCustomInit = true;
      const doInitWebSocket = false;
      const doLoadStatus = false;
      const doRefreshTimer = false;
      const doCustomSync = false;
      const doHeartbeat = true;
 
      const scriptFiles = ['/web?common.js', 'C:/MyStuff/Arduino/CommonMaster/Latest/common.js']; 
      for (let i = 0; i < scriptFiles.length; i++) {
        const scriptElement = document.createElement('script');
        scriptElement.src = scriptFiles[i];
        document.body.appendChild(scriptElement);
      }
      
      window.addEventListener('load', function() {
        initialise();
      });
               
    </script>
  </body>
</html>
